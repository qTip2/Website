extends ../layouts/demo

block title
	| Step by step

block content
	h2 Step by step tooltips
	#target1.target Target 1
	#target2.target Target 2
	#target3.target Target 3
	.clear
	a#next(href='#') Next step »
	a#prev(href='#') « Previous step
	.clear

block scripts
	script(class="example", type="text/javascript")
		/* Important part - our steps. 
		*   This contains an array of objects, each containing the properties of
		*   the tooltip for each step. For this example we use only:
		*
		*      position.target    content.text       content.title
		*   
		*   You can obviously expand this as you require, but be sure to update the
		*   custom event code to set the new properties if you do!
		*/
		var steps = [
			{ target: $('#target1'), title: 'Welcome to step 1!', content: 'Description...' },
			{ target: $('#target2'), title: 'Step 2...', content: 'We are...' },
			{ target: $('#target3'), title: 'and now Step 3', content: 'More text...' }
		];

		$(document).ready(function()
		{
			$(document.body).qtip({
				id: 'step', // Give it an ID of ui-tooltip-step so we an identify it easily
				content: {
					text: steps[0].content, // Use first steps content...
					title: {
						text: steps[0].title, // ...and title
						button: true
					}
				},
				position: {
					my: 'top center',
					at: 'bottom center',
					target: steps[0].target, // Also use first steps position target...
					viewport: $(window) // ...and make sure it stays on-screen if possible
				},
				show: {
					event: false, // Only show when show() is called manually
					ready: true // Also show on page load
				},
				hide: false, // Don't' hide unless we call hide()
				events: {
					render: function(event, api) {
						// Grab tooltip element
						var tooltip = api.elements.tooltip;

						// Track the current step in the API
						api.step = 0;

						// Bind custom custom events we can fire to step forward/back
						tooltip.bind('next prev', function(event) {
							// Increase/decrease step depending on the event fired
							api.step += event.type === 'next' ? 1 : -1;
							api.step = Math.min(steps.length - 1, Math.max(0, api.step));

							// Set new step properties
							var current = steps[api.step];
							if(current) {
								api.set('content.text', current.content);
								api.set('content.title.text', current.title);
								api.set('position.target', current.target);
							}
						});
					},

					// Destroy the tooltip after it hides as its no longer needed
					hide: function(event, api) { api.destroy(); }
				}
			});

			// Setup the next/prev links
			$('#next, #prev').bind('click', function(event) {
				// Trigger the tooltip event
				$('#ui-tooltip-step').triggerHandler(this.id);
				
				// Stop the link from actually clicking
				event.preventDefault();
			})
		})