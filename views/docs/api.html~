<?php $title = 'API'; ?>
<div id="content">
   <div class="center">
      <div id="apireference" class="section">
         <h2>API Reference</h2>
         <div id="api-introduction" class="subsection">
            <a name="introduction"></a>
            <h3><a href="#">Back to the top</a>Introduction to the API</h3>
            <p>API stands for <i>Application Programming Interfaces</i> and allows you to interface with qTips library and extends its functionality through the use of <a href="#callbacks">callbacks</a>, <a href="#methods">methods</a> and <a href="#status">attributes</a> documented later on on this page.</p>
         </div>

         <div id="api-access-tooltip" class="subsection">
            <a name="access-tooltip"></a>
            <h3><a href="#">Back to the top</a>Accessing the API via a tooltip</h3>
            <p>Access to a tooltips <b>full API capabilities</b> is provided through the use of the <b><i>api</i> argument of the qtip() method</b> and can be accessed via the tooltip:</p>
            <pre><code class="javascript">var api = $(myTooltipElement).qtip("api"); // Access the API via the tooltip</code></pre>
            <p>Make sure to <b>replace <i>myTooltipElement</i></b> with your jQuery selector or element reference, as myTooltipElement is simply an example placeholder! Once you have access to the API above, you can fully utilise all available <a href="#methods">methods</a> and <a href="#status">attributes</a> documented below.</p>

            <p>You can also access the tooltip API via it's target element, although this isn't the preferred method as <b>targets can have multiple tooltips assigned to them</b>. To understand how accessing the API works in these instances read up on the <a href="#targetaccess">section below</a>.</p>
         </div>

         <div id="api-access-target" class="subsection">
            <a name="access-target"></a>
            <h3><a href="#">Back to the top</a>Accessing the API via a target element</h3>
            <p>As you know by now, targets can have many tooltips assigned to them at any given time, but then <i>how do you access the API of a specific tooltip?</i> The answer is the <b>interfaces array</b>. When you assign a tooltip to a target element, it gains it's own unique interfaces array. Inside this array is references to all the tooltips currently assigned to this element, the most recent of which located at the end of the array.
            <pre><code class="javascript">var interfaces = $(myTooltipTarget).qtip("interfaces"); // Access the interfaces object of an element</code></pre>

            <p>Let's take a look at an example of what the interfaces array contains. Here's the printed value of the interfaces array for a <i>div element with 2 tooltips assigned</i>:</p>
            <pre><code class="javascript">[Object id=5 options=Object status=Object elements=Object, Object id=7 options=Object status=Object elements=Object]</code></pre>
            <p>As you can see, two interfaces are present in the array which refer to <b>two tooltips, each with their own unique qTip ID</b>. This becomes important in identifying tooltips on your page as the number of qTips grows, as it allows you to identify a single tooltip from several very easily.</p>
            <p>Much like accessing the API via the tooltip, <i>you can gain access to the most recently created tooltip via the .qtip('api') call</i>. For example, the above target element has two tooltips assigned, so to gain access to the most recently created tooltip (ID 7) I can simply request the API object like so:</p>
            <pre><code class="javascript">var api = $(myTooltipTarget).qtip("api"); // Access the API of the last created tooltip</code></pre>
            <p>If, however, I wanted to access the API of the previously created tooltip (ID 5), I request the interfaces array and simply specify its position in the array:</p>
            <pre><code class="javascript">var interfaces = $(myTooltipTarget).qtip("interfaces"); // Access the interfaces array of the target
var api = interfaces[0]; // Retrieve the interfaces arrays first API reference, in this case qTip 5</code></pre>
            <p>The <i>api</i> variable now represents the API of qTip 5, which we can now maniuplate using any of the documented <a href="#methods">methods</a> or <a href="#status">attributes</a> below.</p>
         </div>

         <div id="api-interfaces" class="subsection">
            <a name="interfaces"></a>
            <h3><a href="#">Back to the top</a>Global interfaces array</h3>
            <p>We now know from the previous section that each qTip is assigned its own unique numerical indentifier. Why is this important? <b>The global interfaces array</b>. Each element has it's own interfaces array as mentioned above, but this is simply a subset of the global interfaces array, which <i>stores references to all tooltip APIs currently present on the page</i>. This means as long as we know the specific ID of a tooltip, we can gain access to its API <b>without having prior knowledge of its position, targets, or render status.</b></p>
            <p>Say for instance, we have 50 tooltips on a single page, and we want to update tooltip 32's content. We know it's ID, so we simply retrieve it from global interfaces array:</p>
            <pre><code class="javascript">var api = $.fn.qtip.interfaces[32]; // Grab tooltip 32's API from the interfaces array</code></pre>
            <p>Easy as pie! And as with previous examples, <i>api</i> now refers directly to the tooltips API which we can use all documented <a href="#methods">methods</a> or <a href="#status">attributes</a> on.</p>
            <p>The ID of a tooltip is <i>conservative</i>, meaning if you destroy a tooltip on the page, the next tooltip created will use the newly available, previously used ID. For example, if I now wanted to destroy tooltip 32 and create a new tooltip on the last created DIV, the new tooltip will also have the newly available ID of 32:
            <pre><code class="javascript">$.fn.qtip.interfaces[32].destroy(); // Destroy tooltip 32 via the interfaces array
var id = $('div:last').qtip({ content: 'I\'m a new tooltip!' }).qtip('id'); // Create new tooltip and retrieve ID</code></pre>
            <p><i>id</i> will now be equal to 32. This behaviour allows us to continually destroy and create tooltips on the page without fear of creating a ginormous array of unused spaces.</p>
         </div>

         <div id="api-attributes" class="subsection">
            <a name="attributes"></a>
            <h3><a href="#">Back to the top</a>Attributes</h3>
            The API has a few core attributes which are unique to created tooltip. They can be access directly as properties of the API object.
            <table cellspacing="0" cellpadding="0">
               <tr class="header">
                  <th class="name">Name</th>
                  <th class="description">Description</th>
               </tr>
               <tr class="option">
                  <td class="name"><a name="attributes-id"></a>id</td>
                  <td class="description">This contains the unique numerical ID of the tooltip, which is explained in detail under the <a href="#access-tooltip">Accessing the API via a target element</a>.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="attributes-options"></a>options</td>
                  <td class="description">References the options object which was supplied at tooltip creation after it has been merged with the default options described in the <a href="/projects/qtip/docs/reference/#defaults">options reference section</a>.</td>
               </tr>
            </table>
         </div>

         <div id="api-status" class="subsection">
            <a name="status"></a>
            <h3><a href="#">Back to the top</a>Status object</h3>
            <p>Now we know how to access the API, we can delve into some of its core properties and methods. The first of which is the <b>status object</b>. This contains 5 different <b>boolean</b> sub-properties which indicate the current state of the tooltip:</p>

            <table cellspacing="0" cellpadding="0">
               <tr class="header">
                  <th class="name">Name</th>
                  <th class="description">Description</th>
               </tr>
               <tr class="optionhead">
                  <td class="name">status: {</td>
                  <td class="description">Object containing sub-options below</td>
               </tr>
                  <tr class="suboption">
                     <td class="name"><a name="status-rendered"></a>rendered</td>
                     <td class="description">Indicates whether the tooltip has been rendered yet or not.</td>
                  </tr>
                  <tr class="suboption">
                     <td class="name"><a name="status-hidden"></a>hidden</td>
                     <td class="description">Indicates whether or not the tooltip is currently visible.</td>
                  </tr>
                  <tr class="suboption">
                     <td class="name"><a name="status-focused"></a>focused</td>
                     <td class="description">Indicates whether or not the tooltip is currently focused e.g. moved above all others in the tooltip stack.</td>
                  </tr>
                  <tr class="suboption">
                     <td class="name"><a name="status-disabled"></a>disabled</td>
                     <td class="description">Indicates whether or not the tooltip is currently disabled.</td>
                  </tr>
                  <tr class="suboption">
                     <td class="name"><a name="status-animated"></a>animated</td>
                     <td class="description">Indicates whether or not the tooltip is currently being animated by the show/hide effects.</td>
                  </tr>
            </table>
         </div>

         <div id="api-elements" class="subsection">
            <a name="elements"></a>
            <h3><a href="#">Back to the top</a>Elements object</h3>
            The API provides you with references to all major DOM elements of the tooltip as well as the options provided to create the tooltip.

            <table cellspacing="0" cellpadding="0">
               <tr class="header">
                  <th class="name">Name</th>
                  <th class="description">Description</th>
               </tr>
               <tr class="optionhead">
                  <td class="name">elements: {</td>
                  <td class="description">Object containing sub-options below</td>
               </tr>
                  <tr class="suboption">
                     <td class="name"><a name="elements-target"></a>target</td>
                     <td class="description">A jQuery DOM object referencing the <b>target element</b> of the tooltip.</td>
                  </tr>
                  <tr class="suboption">
                     <td class="name"><a name="elements-tooltip"></a>tooltip</td>
                     <td class="description">A jQuery DOM object referencing the <b>tooltip element</b>.</td>
                  </tr>
                  <tr class="suboption">
                     <td class="name"><a name="elements-tip"></a>tip</td>
                     <td class="description">A jQuery DOM object referencing the <b>tip element</b> of the tooltip.</td>
                  </tr>
                  <tr class="suboption">
                     <td class="name"><a name="elements-wrapper"></a>wrapper</td>
                     <td class="description">A jQuery DOM object referencing the <b>wrapper element</b> of the tooltip. This encapsulates all elements <b>except the tip</b>.</td>
                  </tr>
                  <tr class="suboption">
                     <td class="name"><a name="elements-contentWrapper"></a>contentWrapper</td>
                     <td class="description">A jQuery DOM object referencing the <b>content wrapper element</b> of the tooltip. This encapsulates both the content and title elements.</td>
                  </tr>
                  <tr class="suboption">
                     <td class="name"><a name="elements-title"></a>title</td>
                     <td class="description">A jQuery DOM object referencing the <b>title element</b> of the tooltip. <b>As of beta4 this is placed outside the content element.</b></td>
                  </tr>
                  <tr class="suboption">
                     <td class="name"><a name="elements-button"></a>button</td>
                     <td class="description">A jQuery DOM object referencing the <b>button element</b> of the tooltip. <b>This element is only available when the title is displayed and buttons are enabled.</td>
                  </tr>
                  <tr class="suboption">
                     <td class="name"><a name="elements-content"></a>content</td>
                     <td class="description">A jQuery DOM object referencing the <b>content element</b> of the tooltip.</td>
                  </tr>
                  <tr class="suboption">
                     <td class="name"><a name="elements-content"></a>bgiframe</td>
                     <td class="description">A jQuery DOM object referencing the <b>BGIFrame element</b> of the tooltip <b>only when using Internet Explorer 6</b>. You can read more about this here: <a href="http://plugins.jquery.com/project/bgiframe">http://plugins.jquery.com/project/bgiframe</a></td>
                  </tr>
            </table>

            <i>For full details on the core HTML structure of the tooltip see the <a href="/projects/qtip/docs/#structure">HTML Structure</a> section.</i>
         </div>

         <div id="api-shortcuts" class="subsection">
            <a name="shortcuts"></a>
            <h3><a href="#">Back to the top</a>Shortcut methods</h3>
            <p>It's worth nothing that a select few API methods documented below are available to you <b>without having to access the API directly</b>. These methods are can be called by suppling their names <b>as arguments within the qtip() call</b> on either the tooltip <b>or</b> its target (effects only the last created tooltip as <a href="#targetaccess">described above</a>).</p>
            <pre><code class="javascript">$(mytooltip).qtip("show"); // Shows the tooltip
$(myTooltipElement).qtip("hide"); // Hides the tooltip
$(myTooltipElement).qtip("focus"); // Focuses the tooltip
$(myTooltipElement).qtip("disable"); // Disables the tooltip
$(myTooltipElement).qtip("enable"); // Enables the tooltip
$(myTooltipElement).qtip("destroy"); // Destroys the tooltip</code></pre>
            <p><b>Note: </b> these are simply shortcuts to the actual API methods, which are documented in detail below. They can also be called normally as methods.</p>
         </div>

         <div id="api-methods" class="subsection">
            <a name="methods"></a>
            <h3><a href="#">Back to the top</a>Methods</h3>
            qTip's API provides you with several methods to interact with and manipulate the chosen tooltips attributes and features.

            <table cellspacing="0" cellpadding="0">
               <tr class="header">
                  <th class="name">Name</th>
                  <th class="arguments">Arguments</th>
                  <th class="description">Description</th>
                  <th class="example"></th>
               </tr>
               <tr class="option">
                  <td class="name"><a name="render"></a>render</td>
                  <td class="arguments">&nbsp;</td>
                  <td class="description">This method can be used to force rendering of the qTip, <b>but only if pre-rendering is disabled.</b>
                  </td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Outside an API callback</h4>
                     <pre><code class="javascript">$(myTooltipElement).qtip('render'); // Shortcut method
$(myTooltipElement).qtip('api').render(); // Long-hand API method</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="show"></a>show</td>
                  <td class="arguments">event, duration</td>
                  <td class="description">Call this method to <b>show</b> the tooltip with the effect options provided when the tooltip was created.
                  <br /><br />
                  <i>Access to this function is also available through the shortcut <a href="#shortcuts">qtip("show")</a> argument.</i>
                  </td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <pre><code class="javascript">this.show();</code></pre>
                     You can also specify a custom effect duration <i>in milliseconds</i> like so:
                     <pre><code class="javascript">this.show(null, 300);</code></pre>

                     <h4>Outside an API callback</h4>
                     <pre><code class="javascript">$(myTooltipElement).qtip('show'); // Shortcut method
$(myTooltipElement).qtip('api').show(); // Long-hand API method</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="hide"></a>hide</td>
                  <td class="arguments">event, duration</td>
                  <td class="description">Call this method to <b>hide</b> the tooltip with the effect options provided when the tooltip was created.
                  <br /><br />
                  <i>Access to this function is also available through the shortcut <a href="#shortcuts">qtip("hide")</a> argument.</i></td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <pre><code class="javascript">this.hide();</code></pre>
                     You can also specify a custom effect duration <i>in milliseconds</i> like so:
                     <pre><code class="javascript">this.hide(null, 400);</code></pre>

                     <h4>Outside an API callback</h4>
                     <pre><code class="javascript">$(myTooltipElement).qtip('hide'); // Shortcut method
$(myTooltipElement).qtip('api').hide(); // Long-hand API method</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="focus"></a>focus</td>
                  <td class="arguments">event</td>
                  <td class="description">Calling this method causes the tooltip to be 'focused' e.g. moved above all others in the tooltip stack. <b>This adjusts the z-index of all other tooltips</b> when called.
                  <br /><br />
                  <i>Access to this function is also available through the shortcut <a href="#shortcuts">qtip("focus")</a> argument.</i></td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <pre><code class="javascript">this.focus();</code></pre>

                     <h4>Outside an API callback</h4>
                     <pre><code class="javascript">$(myTooltipElement).qtip('focus'); // Shortcut method
$(myTooltipElement).qtip('api').focus(); // Long-hand API method</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="disable"></a>disable</td>
                  <td class="arguments">state</td>
                  <td class="description">When called with state set to <b>true</b>, the tooltip will be temporarily disabled, and will not fire any events e.g. hide, show, focus. If called with state set to <b>false</b>, the tooltip will be enabled and will fire all assigned events.
                  <br /><br />
                  <i>Access to this function is also available through the shortcut <a href="#shortcuts">qtip("enable")</a> and <a href="#shortcuts">qtip("disable")</a> arguments.</i></td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <p>Disable a tooltip so it won't show or hide</p>
                     <pre><code class="javascript">this.disable(true); // Disables the tooltip</code></pre>
                     <p>Re-enable the tooltip and regain show/hide events</p>
                     <pre><code class="javascript">this.disable(false); // Enables the tooltip</code></pre>

                     <h4>Outside an API callback</h4>
                     <p>Disable a tooltip so it won't show or hide:</p>
                     <pre><code class="javascript">$(myTooltipElement).qtip('disable'); // Shortcut method to disable
$(myTooltipElement).qtip('api').disable(true); // Long-hand API disable</code></pre>
                     <p>Re-enable the tooltip and regain show/hide events:</p>
                     <pre><code class="javascript">$(myTooltipElement).qtip('enable'); // Shortcut method to enable
$(myTooltipElement).qtip('api').disable(false); // Long-hand API enable</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="updateWidth"></a>updateWidth</td>
                  <td class="arguments">width</td>
                  <td class="description">When called this method updates the width of the tooltip relative to contents within it. It is advised you <b>call this method when updating the tooltip contents directly without using the updateContent API method</b>.
                  <br /><br />
                  If a width is supplied, the tooltip width is set to the supplied value.</td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <p>Update the width of the tooltip to 400px:</p>
                     <pre><code class="javascript">this.updateWidth(400);</code></pre>

                     <h4>Outside an API callback</h4>
                     <p>Update the width of the tooltip to 750px:</p>
                     <pre><code class="javascript">$(myTooltipElement).qtip('api').updateWidth(750);</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="updatePosition"></a>updatePosition</td>
                  <td class="arguments">event, animate</td>
                  <td class="description">When called this method updates the position of the tooltip using the options provided when the tooltip was created.
                  <br /><br />
                  <b>If animate is set to true</b>, a smooth transition will occur to the new position, otherwise the position is set immediately.</td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <p>Update the position of the tooltip according to defined positioning options:</p>
                     <pre><code class="javascript">this.updatePosition();</code></pre>
                     <p>Update the position of the tooltip, but do not animate the movement:</p>
                     <pre><code class="javascript">this.updatePosition(null, false);</code></pre>

                     <h4>Outside an API callback</h4>
                     <p>Update the position of the tooltip according to defined positioning options.</p>
                     <pre><code class="javascript">$(myTooltipElement).qtip('api').updatePosition();</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="getPosition"></a>getPosition</td>
                  <td class="arguments"></td>
                  <td class="description">Returns the current position of the tooltip <b>relative to the document</b> e.g. [0,0] is the top left corner of the viewport/document.</td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <p>Retrieve the current position of tooltip relative to the document:</p>
                     <pre><code class="javascript">this.getPosition();</code></pre>

                     <h4>Outside an API callback</h4>
                     <p>Retrieve the current position of tooltip relative to the document:</p>
                     <pre><code class="javascript">$(myTooltipElement).qtip('api').getPosition();</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="getDimensions"></a>getDimensions</td>
                  <td class="arguments"></td>
                  <td class="description">Returns the current dimensions <i>(i.e. height and width)</i> of the tooltip, regardless of its current display state.</td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <p>Retrieve the current dimensions (height and width) of the tooltip:</p>
                     <pre><code class="javascript">this.getDimensions();</code></pre>

                     <h4>Outside an API callback</h4>
                     <p>Retrieve the current dimensions (height and width) of the tooltip:</p>
                     <pre><code class="javascript">$(myTooltipElement).qtip('api').getDimensions();</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="updateStyle"></a>updateStyle</td>
                  <td class="arguments">name</td>
                  <td class="description">When called this method updates the style of the tooltip to the specified style '<i>name</i>'. This can be either a preset (e.g. red, blue) or custom global style, but <b>must be defined prior to calling this method</b>.
                  <br /><br />
                  <b>Note: </b>For details on defining custom global styles, see the <a href="/projects/qtip/docs/tutorials/#styling">Styling tutorial</a>.
                  </td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <p>Update the style of the tooltip to a core library global style:</p>
                     <pre><code class="javascript">this.updateStyle('red'); // Make the tooltip red</code></pre>
                     <p>Update the style of the tooltip to a custom global style:</p>
                     <pre><code class="javascript">this.updateStyle('myStyle'); // Change the tooltip style</code></pre>

                     <h4>Outside an API callback</h4>
                     <p>Update the style of the tooltip to a core library global style:</p>
                     <pre><code class="javascript">$(myTooltipElement).qtip('api').updateStyle('red');</code></pre>
                     <p>Update the style of the tooltip to a custom global style:</p>
                     <pre><code class="javascript">$(myTooltipElement).qtip('api').updateStyle('myStyle');</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="updateContent"></a>updateContent</td>
                  <td class="arguments">content, reposition</td>
                  <td class="description">Updates the tooltips HTML content to the provided <i>content</i> string. The <b>tooltip position is also updated</b> once the new content is set. If reposition is set to <b>false</b> the tooltips position on-screen and its tip position <i>will not be updated</i>.
                  <br /><br />
                  If images are contained within the content, tooltip position will be updated once all images are loaded to prevent mis-positioning.</td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <p>Update the tooltip content with a simple text string:</p>
                     <pre><code class="javascript">this.updateContent('This is my new tooltip content!');</code></pre>
                     <p>Update the tooltip content with the contents of the last DIV element in the document:</p>
                     <pre><code class="javascript">this.updateContent($('div:last'));</code></pre>
                     <p>Update the tooltip content with the contents of the first LI element in the document,  but don't update it's position:</p>
                     <pre><code class="javascript">this.updateContent($('li:first'), false);</code></pre>

                     <h4>Outside an API callback</h4>
                     <p>Update the tooltip content with a simple text string:</p>
                     <pre><code class="javascript">$(myTooltipElement).qtip('api').updateContent('New content!');</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="loadContent"></a>loadContent</td>
                  <td class="arguments">url, data, method, ajax, reposition</td>
                  <td class="description">Updates the tooltips content with that of the file <b>url</b>, which is passed optional an <b>data</b> array with the defined request <i>method</i> e.g. GET or POST. The <b>tooltip position is also updated</b> once the new content is set. If reposition is set to <b>false</b> the tooltips position on-screen and its tip position <i>will not be updated</i>.
                  <br /><br />
                  The ajax object can contain <b>any valid <a href="http://docs.jquery.com/Ajax/jQuery.ajax#toptions">$.ajax option</a></b>, and is passed along with the url, data and method parameters to the <a href="http://docs.jquery.com/Ajax/jQuery.ajax">$.ajax call</a>.
                  <br /><br />
                  <b>Note:</b> This method utilises the above updateContent method to update the tooltip contents and as such, <b>fires the associated <i>beforeContentUpdate</i> and <i>onContentUpdate</i> events</b>.</td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <p>Load some content from a locally hosted HTML page</p>
                     <pre><code class="javascript">this.loadContent('democontent.html');</code></pre>
                     <p>Load specific content from a locally dynamic PHP page by supplying a content ID:</p>
                     <pre><code class="javascript">this.loadContent('news.php', { id: 2 });</code></pre>
                     <p>Load the same data as above but send it using POST instead of GET:</p>
                     <pre><code class="javascript">this.loadContent('news.php', { id: 2 }, 'post');</code></pre>
                     <p>Load some JSON data by utilising the <i>ajax</i> object:</p>
                     <pre><code class="javascript">this.loadContent('news.php', { id: 2 }, 'get', { dataType: 'json' });</code></pre>
                     <p>Load basic HTML content but don't update tooltip position:</p>
                     <pre><code class="javascript">this.loadContent('democontent.html', {}, 'get', {}, false);</code></pre>

                     <h4>Outside an API callback</h4>
                     <p>Load some content from a locally hosted HTML page</p>
                     <pre><code class="javascript">$(myTooltipElement).qtip('api').loadContent('democontent.html');</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="updateTitle"></a>updateTitle</td>
                  <td class="arguments">content</td>
                  <td class="description">Updates the tooltip titles HTML content to the provided <i>content</i> string. <i>Button elements, if enabled, are preserved</i>.</td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <p>Update the tooltip title with a simple text string:</p>
                     <pre><code class="javascript">this.updateTitle('My new tooltip title!');</code></pre>
                     <p>Update the tooltip title with the contents of the first h2 element in the document:</p>
                     <pre><code class="javascript">this.updateTitle($('h2:first'));</code></pre>

                     <h4>Outside an API callback</h4>
                     <p>Update the tooltip title with a simple text string:</p>
                     <pre><code class="javascript">$(myTooltipElement).qtip('api').updateTitle('My new tooltip title!');</code></pre>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="destroy"></a>destroy</td>
                  <td class="arguments"></td>
                  <td class="description">Destroys the tooltip and removes all bound associated events. <i>Access to this function is also available through the shortcut <a href="#shortcuts">qtip("destroy")</a> argument.</i></td>
                  <td class="example">
                     <h4 style="margin-top: 0;">Inside an API callback</h4>
                     <p>Destroy the tooltip, it's elements, and remove all API references:</p>
                     <pre><code class="javascript">this.destroy(); // Destroy it</code></pre>

                     <h4>Outside an API callback</h4>
                     <p>Destroy the tooltip, it's elements, and remove all API references:</p>
                     <pre><code class="javascript">$(myTooltipElement).qtip('destroy'); // Shortcut method to destroy
$(myTooltipElement).qtip('api').destroy(); // Long-hand API destroy</code></pre>
                  </td>
               </tr>
            </table>
         </div>
         <div id="api-callbacks" class="subsection">
            <a name="callbacks"></a>
            <h3><a href="#">Back to the top</a>Callbacks</h3>
            Also available are event driven callback methods, allowing you to extend qTip's functionality via third party scripts.

            <table cellspacing="0" cellpadding="0">
               <tr class="header">
                  <th class="name">Name</th>
                  <th class="arguments">Parameters</th>
                  <th class="description">Description</th>
               </tr>
               <tr class="option">
                  <td class="name"><a name="beforeRender"></a>beforeRender</td>
                  <td class="arguments">&nbsp;</td>
                  <td class="description">
                     Called <b>before</b> the tooltip is rendered.
                     <br /><br />
                     If <a href="/projects/qtip/docs/reference/#content-prerender">content.prerender</a> is to set to <b>true</b>, this method will be called on document load, on each tooltip, as it is rendered. If set to <b>false</b>, which is the default behaviour, this method will be called when the tooltip is first shown e.g. when its first show event is triggered.
                     <br /><br />
                     <b>Note: </b>When using this method, it is important to note that <i>nothing but the API options and target element can be accessed</i> within the function scope, since the tooltip has not yet been rendered.
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="onRender"></a>onRender</td>
                  <td class="arguments">&nbsp;</td>
                  <td class="description">Called <b>after</b> the tooltip is rendered.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="beforePositionUpdate"></a>beforePositionUpdate</td>
                  <td class="arguments">event</td>
                  <td class="description">Called <b>before</b> the tooltip position is updated.
                  <br /><br />
                  <b>Note:</b> If false is returned by the callback, the tooltip position will not be updated.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="onPositionUpdate"></a>onPositionUpdate</td>
                  <td class="arguments">event</td>
                  <td class="description">Called <b>after</b> the tooltip position is updated.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="beforeShow"></a>beforeShow</td>
                  <td class="arguments">event</td>
                  <td class="description">Called <b>before</b> the tooltip is shown.
                  <br /><br />
                  <b>Note:</b> If false is returned by the callback, the tooltip will not be shown.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="onShow"></a>onShow</td>
                  <td class="arguments">event</td>
                  <td class="description">Called <b>after</b> the tooltip is shown.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="beforeHide"></a>beforeHide</td>
                  <td class="arguments">event</td>
                  <td class="description">Called <b>before</b> the tooltip is hidden.
                  <br /><br />
                  <b>Note:</b> If false is returned by the callback, the tooltip will not be hidden.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="onHide"></a>onHide</td>
                  <td class="arguments">event</td>
                  <td class="description">Called <b>after</b> the tooltip is hidden.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="beforeFocus"></a>beforeFocus</td>
                  <td class="arguments">event</td>
                  <td class="description">Called <b>before</b> the tooltip is focused, either by the user, or when a tooltip is moused over.
                  <br /><br />
                  <b>Note:</b> If false is returned by the callback, the tooltip will not be focused.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="onFocus"></a>onFocus</td>
                  <td class="arguments">event</td>
                  <td class="description">Called <b>after</b> the tooltip is focused, either by the user, or when a tooltip is moused over.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="beforeContentUpdate"></a>beforeContentUpdate</td>
                  <td class="arguments">event, content</td>
                  <td class="description">
                     Called <b>before</b> the tooltip content is updated by the updateContent or loadContent methods, or when <b>the url option is provided</b> in the options.
                     <br /><br />
                     <b>Note:</b> If the return value of the callback is a string, the string will be used as the content. <br />
                     <b>Note:</b> If false is returned by the callback, <i>the tooltip content will not be updated.</i>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="onContentUpdate"></a>onContentUpdate</td>
                  <td class="arguments">event</td>
                  <td class="description">Called <b>after</b> the tooltip content is updated by the updateContent or loadContent methods, or <b>when the url option is provided</b> within the options.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="beforeContentLoad"></a>beforeContentLoad</td>
                  <td class="arguments">&nbsp;</td>
                  <td class="description">Called <b>before</b> the tooltip content is updated by the loadContent method or <b>when url option is provided</b>.
                  <br /><br />
                  <b>Note:</b> If false is returned by the callback, the tooltip content will not be updated.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="onContentLoad"></a>onContentLoad</td>
                  <td class="arguments">&nbsp;</td>
                  <td class="description">Called <b>after</b> the tooltip content is updated by the loadContent method or <b>when the url option is provided</b> within the options.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="beforeTitleUpdate"></a>beforeTitleUpdate</td>
                  <td class="arguments"></td>
                  <td class="description">
                     Called <b>before</b> the tooltips title content is updated by the updateTitle method.
                     <br /><br />
                     <b>Note:</b> If false is returned by the callback, <i>the tooltips title content will not be updated.</i>
                  </td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="onTitleUpdate"></a>onTitleUpdate</td>
                  <td class="arguments"></td>
                  <td class="description">Called <b>after</b> the tooltips title content is updated by the updateTitle method.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="beforeDestroy"></a>beforeDestroy</td>
                  <td class="arguments">&nbsp;</td>
                  <td class="description">Called <b>before</b> the tooltip is destroyed. If false is returned by the callback, the destroy will be halted.</td>
               </tr>
               <tr class="option">
                  <td class="name"><a name="onDestroy"></a>onDestroy</td>
                  <td class="arguments">&nbsp;</td>
                  <td class="description">Called <b>after</b> the tooltip is destroyed.</td>
               </tr>
            </table>
         </div>
      </div>
   </div>
   </div>